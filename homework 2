//Урок 2. Исключения и их обработка
//Реализуйте метод, который запрашивает у пользователя ввод дробного числа (типа float), и возвращает введенное значение. 
//Ввод текста вместо числа не должно приводить к падению приложения, вместо этого, 
необходимо повторно запросить у пользователя ввод данных.
//2.Если необходимо, исправьте данный код try {
   //int d = 0;
   //double catchedRes1 = intArray[8] / d;
   //System.out.println("catchedRes1 = " + catchedRes1);
//} catch (ArithmeticException e) {
   //System.out.println("Catching exception: " + e);
//}

import java.util.InputMismatchException;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        double number = readFloatInput();
        System.out.println("Entered number: " + number);
    }

    public static double readFloatInput() {
        Scanner scanner = new Scanner(System.in);
        double result = 0.0;
        boolean validInput = false;

        while (!validInput) {
            try {
                System.out.print("Enter a floating-point number: ");
                result = scanner.nextDouble();
                validInput = true;
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a valid floating-point number.");
                scanner.nextLine(); // Clear the invalid input from the scanner buffer
            }
        }

        return result;
    }
}

//2)Дан следующий код, исправьте его там, где требуется 
//public static void main(String[] args) throws Exception {
   //try {
       //int a = 90;
       //int b = 3;
       //System.out.println(a / b);
       //printSum(23, 234);
       //int[] abc = { 1, 2 };
       //abc[3] = 9;
   //} catch (Throwable ex) {
       //System.out.println("Что-то пошло не так...");
   //} catch (NullPointerException ex) {
       //System.out.println("Указатель не может указывать на null!");
   //} catch (IndexOutOfBoundsException ex) {
       //System.out.println("Массив выходит за пределы своего размера!");
   //}
//}
//public static void printSum(Integer a, Integer b) throws FileNotFoundException {
   //System.out.println(a + b);
//}


import java.io.FileNotFoundException;

public class Main {
    public static void main(String[] args) throws Exception {
        try {
            int a = 90;
            int b = 3;
            System.out.println(a / b);
            printSum(23, 234);
            int[] abc = {1, 2};
            abc[3] = 9;
        } catch (NullPointerException ex) {
            System.out.println("Указатель не может указывать на null!");
        } catch (IndexOutOfBoundsException ex) {
            System.out.println("Массив выходит за пределы своего размера!");
        } catch (Throwable ex) {
            System.out.println("Что-то пошло не так...");
        }
    }

    public static void printSum(Integer a, Integer b) throws FileNotFoundException {
        System.out.println(a + b);
    }
}

//3)Разработайте программу, которая выбросит Exception, когда пользователь вводит пустую строку. 
//Пользователю должно показаться сообщение, что пустые строки вводить нельзя.

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        try {
            String input = readInput();
            System.out.println("Введенная строка: " + input);
        } catch (Exception e) {
            System.out.println("Ошибка: " + e.getMessage());
        }
    }

    public static String readInput() throws Exception {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Введите строку: ");
        String input = scanner.nextLine();
        
        if (input.isEmpty()) {
            throw new Exception("Пустые строки вводить нельзя!");
        }
        
        return input;
    }
}


