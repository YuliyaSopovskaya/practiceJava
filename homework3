//Урок 3. Продвинутая работа с исключениями в Java
//Напишите приложение, которое будет запрашивать у пользователя следующие данные, разделенные пробелом:
//Фамилия Имя Отчество номертелефона
//Форматы данных:
//фамилия, имя, отчество - строки
//номертелефона - целое беззнаковое число без форматирования
//Ввод всех элементов через пробел
//Приложение должно проверить введенные данные по количеству. 
//Если количество не совпадает с требуемым, вернуть код ошибки, обработать его и показать пользователю сообщение, 
//что он ввел меньше и больше данных, чем требуется.
//Приложение должно попытаться распарсить полученные значения и выделить из них требуемые параметры.
//Если форматы данных не совпадают, нужно бросить исключение, соответствующее типу проблемы.
//Можно использовать встроенные типы java и создать свои. 
//Исключение должно быть корректно обработано, пользователю выведено сообщение с информацией, что именно неверно.
//Если всё введено и обработано верно, должен создаться файл с названием, 
//равным фамилии, в него в одну строку должны записаться полученные данные, вида
//<Фамилия><Имя><Отчество><номер_телефона>
//Однофамильцы должны записаться в один и тот же файл, в отдельные строки.
//Не забудьте закрыть соединение с файлом.
//При возникновении проблемы с чтением-записью в файл, 
//исключение должно быть корректно обработано, пользователь должен увидеть стектрейс ошибки.

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

class InvalidDataFormatException extends Exception {
    public InvalidDataFormatException(String message) {
        super(message);
    }
}

class MissingDataException extends Exception {
    public MissingDataException(String message) {
        super(message);
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Введите данные (фамилия имя отчество номер_телефона):");
        String input = scanner.nextLine();
        scanner.close();

        String[] data = input.split(" ");

        try {
            validateDataLength(data);
            String surname = parseSurname(data[0]);
            String firstName = parseFirstName(data[1]);
            String patronymic = parsePatronymic(data[2]);
            long phoneNumber = parsePhoneNumber(data[3]);

            String filename = surname + ".txt";
            writeToFile(filename, surname, firstName, patronymic, phoneNumber);

            System.out.println("Данные успешно записаны в файл: " + filename);
        } catch (MissingDataException | InvalidDataFormatException e) {
            System.err.println("Ошибка: " + e.getMessage());
        } catch (IOException e) {
            System.err.println("Ошибка при записи в файл:");
            e.printStackTrace();
        }
    }

    private static void validateDataLength(String[] data) throws MissingDataException {
        if (data.length != 4) {
            throw new MissingDataException("Введено недостаточно данных. Ожидается фамилия, имя, отчество и номер телефона.");
        }
    }

    private static String parseSurname(String input) throws InvalidDataFormatException {
        if (input.isEmpty()) {
            throw new InvalidDataFormatException("Фамилия не может быть пустой.");
        }
        return input;
    }

    private static String parseFirstName(String input) throws InvalidDataFormatException {
        if (input.isEmpty()) {
            throw new InvalidDataFormatException("Имя не может быть пустым.");
        }
        return input;
    }

    private static String parsePatronymic(String input) throws InvalidDataFormatException {
        if (input.isEmpty()) {
            throw new InvalidDataFormatException("Отчество не может быть пустым.");
        }
        return input;
    }

    private static long parsePhoneNumber(String input) throws InvalidDataFormatException {
        try {
            return Long.parseLong(input);
        } catch (NumberFormatException e) {
            throw new InvalidDataFormatException("Номер телефона должен быть целым числом без форматирования.");
        }
    }

    private static void writeToFile(String filename, String surname, String firstName, String patronymic, long phoneNumber) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename, true))) {
            writer.write(surname + firstName + patronymic + phoneNumber);
            writer.newLine();
        }
    }
}
